"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class loginfo_lcmt(object):
    __slots__ = ["timestep", "log_signal", "logfile_name", "log_num"]

    def __init__(self):
        self.timestep = 0.0
        self.log_signal = False
        self.logfile_name = ""
        self.log_num = 0

    def encode(self):
        buf = BytesIO()
        buf.write(loginfo_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">db", self.timestep, self.log_signal))
        __logfile_name_encoded = self.logfile_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__logfile_name_encoded)+1))
        buf.write(__logfile_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.log_num))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != loginfo_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return loginfo_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = loginfo_lcmt()
        self.timestep = struct.unpack(">d", buf.read(8))[0]
        self.log_signal = bool(struct.unpack('b', buf.read(1))[0])
        __logfile_name_len = struct.unpack('>I', buf.read(4))[0]
        self.logfile_name = buf.read(__logfile_name_len)[:-1].decode('utf-8', 'replace')
        self.log_num = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if loginfo_lcmt in parents: return 0
        tmphash = (0xe92c4f79ef703d63) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if loginfo_lcmt._packed_fingerprint is None:
            loginfo_lcmt._packed_fingerprint = struct.pack(">Q", loginfo_lcmt._get_hash_recursive([]))
        return loginfo_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

